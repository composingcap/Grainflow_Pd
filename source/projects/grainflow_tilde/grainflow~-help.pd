#N canvas 115 383 1105 469 12;
#X declare -path ./assets;
#X obj 271 240 sig~ 0;
#X obj 28 103 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 103 161 phasor~ 8;
#X floatatom 272 218 5 0 0 1 Transposition\ Modulation - - 0;
#X obj 357 263 sig~ 0;
#X floatatom 357 238 5 0 1 1 Amplitude\ Modulation - - 0;
#X text 19 3 Grainflow~ - Granulate arrays;
#X floatatom 187 169 5 0 0 1 Traversal\ Phasor - - 0;
#X floatatom 103 134 7 0 0 1 Grain\ Clock - - 0;
#X obj 187 192 phasor~ 0.2;
#X obj 111 251 r _gf_params;
#N canvas 560 276 653 678 parameters 0;
#X obj 18 205 s _gf_params;
#X msg 93 164 delayRandom \$1;
#X floatatom 93 137 5 0 0 0 - - - 0;
#X text 10 74 For example \, here are the messages for the delay parameter;
#X floatatom 19 137 5 0 0 0 - - - 0;
#X msg 19 164 delay \$1;
#X floatatom 218 136 5 0 0 0 - - - 0;
#X msg 218 163 delayOffset \$1;
#X text 261 135 <= sets delay time in ms;
#X text 8 -1 Grainflow~ is controlled primaraly through parameter messages that control the properties of each grain. Each parameter has a base \, random \, and offset value. base: sets a fixed value random: sets a random value on each new grain offset: sets values that are scaled by the index of each grain, f 80;
#X obj 94 92 loadbang;
#X msg 93 113 200;
#X obj 32 451 s _gf_params;
#X msg 58 330 deviate transpose 1 2;
#X msg 58 386 spread transpose 0 24;
#X msg 43 277 g 1 transpose 12;
#X msg 25 249 transpose 0 7 12 15;
#X text 163 248 <= sets grains by rotating this list, f 30;
#X text 163 276 <= sets the parameter of a particular grain, f 30;
#X text 205 329 <= sets all grains by randomly selecting around a point, f 27;
#X text 205 385 <= sets all grains by creating a line between a start and end point, f 27;
#X msg 68 415 transpose 0;
#X text 451 108 ---parameters---;
#X text 450 128 delay- delay time in ms;
#X text 450 150 rate- changes play speed in terms of rate;
#X text 450 173 transpose-rate in semitones;
#X text 450 196 glisson- rate over the duration of the grain;
#X text 450 218 glissonSt- glisson in semitones;
#X text 450 264 amp- changes the volume in amps;
#X text 450 323 These parameters only have base messages:;
#X text 450 348 density- the probability a grain will fire (0-1);
#X text 450 241 space- empty space at the end of each grain (0-1);
#X text 450 287 window-position of each grain window (0-1), f 39;
#X text 450 396 rateQuantizeSemi- quantizes transposition values to a number of semitones, f 46;
#X text 450 372 direction- probability or the direction of playback(-1 - 1);
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 10 0 11 0;
#X connect 11 0 2 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 15 0 12 0;
#X connect 16 0 12 0;
#X connect 21 0 12 0;
#X restore 323 0 pd parameters;
#X msg 29 133 state \$1;
#X obj 102 369 *~ 0.25;
#X obj 102 339 grainflow.stereoPan~ 0.5 1;
#X obj 102 399 dac~ 1;
#X obj 102 84 loadbang;
#X msg 102 108 8;
#X obj 193 87 loadbang;
#X msg 193 111 0.2;
#X text 261 0 Topics:;
#N canvas 208 208 1043 255 _loadBuffers 0;
#X obj 34 92 soundfiler;
#X obj 171 103 array define _gf_buf;
#X obj 48 -9 loadbang;
#X obj 171 131 array define _gf_buf2;
#X obj 325 103 array define _gf_customEnv;
#X obj 370 133 array define _gf_2d_envelope;
#X obj 58 195 declare -path ./assets;
#X msg 35 36 read -resize bells.wav _gf_buf;
#X msg 280 34 read -resize grainflow.Pluck.aif _gf_customEnv;
#X msg 111 67 read -resize bassColLengo.wav _gf_buf2;
#X msg 419 66 read -resize grainflow.2DEnvelope.aif _gf_2d_envelope;
#X connect 2 0 7 0;
#X connect 2 0 9 0;
#X connect 2 0 8 0;
#X connect 2 0 10 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X restore 16 435 pd _loadBuffers;
#N canvas 26 26 830 300 buffersAndEnvelopes 0;
#X msg 121 33 buf _gf_buf2;
#X obj 18 60 s _gf_params;
#X msg 19 33 buf _gf_buf;
#X text 18 12 buf changes the refrence buffer;
#X msg 166 107 env default;
#X msg 13 107 env _gf_customEnv;
#X text 16 88 env changes the refrence envelope;
#X obj 14 141 s _gf_params;
#X text 221 54 ^this one uses two buffers;
#X msg 269 106 env _gf_customEnv default;
#X obj 15 247 s _gf_params;
#X msg 28 214 envelopePosition \$1;
#X obj 178 214 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 16 185 env _gf_2d_envelope 5;
#X text 192 176 An envelope followed by a number will be treated as a 2D envelope, f 33;
#X text 347 217 envelopePosition (0-1) controls where the 2D envelope is read, f 22;
#X msg 222 32 buf _gf_buf _gf_buf2 _gf_buf2;
#X connect 0 0 1 0;
#X connect 2 0 1 0;
#X connect 4 0 7 0;
#X connect 5 0 7 0;
#X connect 9 0 7 0;
#X connect 11 0 10 0;
#X connect 12 0 11 0;
#X connect 13 0 10 0;
#X connect 16 0 1 0;
#X restore 322 22 pd buffersAndEnvelopes;
#N canvas 1299 409 450 300 synthesis 0;
#X obj 94 123 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 91 154 state \$1;
#X obj 36 366 clone -d mc_fm 8, f 47;
#X obj 36 217 noise~;
#X obj 103 292 noise~;
#X obj 103 322 expr~ $v1 * 2 + 3;
#X obj 240 292 noise~;
#X obj 240 322 expr~ $v1 * 1 + 1.5;
#X obj 36 435 grainflow.stereoPan~;
#X obj 36 409 *~;
#X obj 36 494 dac~ 1;
#X obj 91 197 grainflow~ 0 8, f 37;
#X obj 168 154 phasor~ 0.1;
#X obj 36 466 *~ 0.125;
#X obj 36 247 expr~ $v1 * 400 + 600;
#X text 22 15 Granular Synthesis;
#X text 22 45 You can use the output of grainflow~ to drive granular synthesis. This example shows a simple FM soundscape driven by grainflow~;
#X text 364 187 <= When the buffer name is set to 0 \, grainflow does not attempt to read the buffer, f 32;
#X text 364 365 <= This clone distributes the input and output signals amongst voices, f 32;
#X connect 0 0 1 0;
#X connect 1 0 11 0;
#X connect 2 0 9 0;
#X connect 3 0 14 0;
#X connect 4 0 5 0;
#X connect 5 0 2 1;
#X connect 6 0 7 0;
#X connect 7 0 2 2;
#X connect 8 0 13 0;
#X connect 9 0 8 0;
#X connect 11 2 2 3;
#X connect 11 2 8 1;
#X connect 11 6 9 1;
#X connect 12 0 11 0;
#X connect 13 0 10 0;
#X connect 14 0 2 0;
#X restore 322 71 pd synthesis;
#N canvas 781 320 856 453 multichannelInputs 0;
#X obj 61 295 grainflow.stereoPan~ 0.5 1;
#X obj 74 136 phasor~ 8;
#X obj 76 191 snake~ 2;
#X obj 216 202 snake~ 4;
#X obj 61 264 grainflow~ _gf_buf 12, f 37;
#X obj 130 156 phasor~ 15;
#X obj 209 109 phasor~ 0.1;
#X obj 227 131 phasor~ 0.05;
#X obj 253 155 phasor~ 0.2;
#X obj 272 177 phasor~ 0.25;
#X obj 372 164 snake~ 3;
#X obj 374 198 *~ 0.5;
#X obj 430 111 osc~ 5;
#X obj 61 338 *~ 0.25;
#X obj 61 368 dac~ 1;
#X obj 24 61 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 25 91 state \$1;
#X obj 371 112 osc~ 1;
#X obj 492 113 osc~ 20;
#X text 16 4 Grainflow~'s inlets can be controled with multichannel signals. There signals will rotate over the number of grains., f 76;
#X text 72 113 Grain clock;
#X text 207 85 Traversal;
#X text 369 84 Transposition;
#X connect 0 0 13 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 4 1;
#X connect 4 0 0 0;
#X connect 4 2 0 1;
#X connect 5 0 2 1;
#X connect 6 0 3 0;
#X connect 7 0 3 1;
#X connect 8 0 3 2;
#X connect 9 0 3 3;
#X connect 10 0 11 0;
#X connect 11 0 4 2;
#X connect 12 0 10 1;
#X connect 13 0 14 0;
#X connect 15 0 16 0;
#X connect 16 0 4 0;
#X connect 17 0 10 0;
#X connect 18 0 10 2;
#X restore 322 45 pd multichannelInputs;
#X obj 102 292 grainflow~ _gf_buf 8, f 37;
#N canvas 182 182 788 489 parameterArrays 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array rates 8 float 3;
#A 0 0.342857 1.34286 1.62858 1.97144 2.3143 2.68573 2.97144 3.42859;
#X coords 0 4 8 0 200 140 1 0 0;
#X restore 38 43 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array delays 8 float 3;
#A 0 499.993 1142.86 1750 2250 2750 3428.58 4071.44 4357.15;
#X coords 0 5000 8 0 200 140 1;
#X restore 266 43 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array windows 8 float 3;
#A 0 0.0499943 0.11428 0.28571 0.464283 0.592855 0.714284 0.828571 0.914285;
#X coords 0 1 8 0 200 140 1;
#X restore 481 43 graph;
#X obj 38 342 grainflow~ _gf_buf 8, f 37;
#X obj 38 306 phasor~ 8;
#X msg 11 274 state \$1;
#X obj 38 412 *~ 0.25;
#X obj 38 382 grainflow.stereoPan~ 0.5 1;
#X obj 38 442 dac~ 1;
#N canvas 733 172 450 300 setModes 0;
#X obj 25 236 outlet;
#X msg 25 108 rateMode 2 \, rateBuffer rates;
#X msg 228 108 delayMode 1 \, delayBuffer delays;
#X obj 25 23 loadbang;
#X msg 51 140 windowMode 1 \, windowBuffer windows;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 3 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X restore 340 267 pd setModes;
#X obj 11 236 tgl 25 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X connect 3 0 7 0;
#X connect 3 2 7 1;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 9 0 3 0;
#X connect 10 0 5 0;
#X restore 501 1 pd parameterArrays;
#N canvas 143 82 713 518 streams 0;
#X obj 27 126 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 100 342 phasor~ 8;
#X obj 180 342 phasor~ 0.2;
#X msg 24 162 state \$1;
#X obj 100 433 *~ 0.25;
#X obj 100 403 grainflow.stereoPan~ 0.5 1;
#X obj 100 463 dac~ 1;
#X obj 100 373 grainflow~ _gf_buf 8, f 37;
#X msg 100 162 streamSet auto 4;
#X msg 100 252 streamSet random 4;
#X msg 100 208 streamSet per 4;
#X text 391 161 You can assign parameter values to every grain in a stream, f 34;
#X msg 391 260 streamDeviate transpose 1 2;
#X msg 391 233 stream 1 transpose 9;
#X msg 391 299 streamSpread transpose 0 24;
#X msg 391 200 transpose 0;
#X text 488 198 <= normal param;
#X text 543 231 <= changes a single steam;
#X text 574 254 <= deviates all streams around a number, f 21;
#X text 583 297 <= Evenly distributes a param value to all streams, f 19;
#X text 215 161 <= Rotates through grains asigning streams, f 21;
#X text 215 200 <= Partitions grains into streams, f 17;
#X text 243 248 <= Randomly assigns streams, f 13;
#X text 27 19 Streams;
#X text 27 47 Streams are a way to easily control groups of grains;
#X connect 0 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 7 1;
#X connect 3 0 7 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 7 0 5 0;
#X connect 7 2 5 1;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X connect 12 0 7 0;
#X connect 13 0 7 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X restore 501 22 pd streams;
#N canvas 117 193 1164 1033 refrence 0;
#X obj 14 21 cnv 15 600 9 empty empty ARGS: 0 20 0 14 #000000 #373737 0;
#X obj 14 147 cnv 15 600 9 empty empty INLETS: 0 20 0 14 #000000 #373737 0;
#X obj 14 266 cnv 15 600 9 empty empty OUTLETS: 0 20 0 14 #000000 #373737 0;
#X text 38 314 (list) Grain Info;
#X text 14 179 (mc sig) Grain Clock: controls the lifetime of all of the grains, f 69;
#X text 14 198 (mc sig )Traversal Phasor: Controls the initial sampling position in the array, f 79;
#X text 14 217 (mc sig) Transposition Modulation;
#X text 14 236 (mc sig) Amplitude Modulation;
#X text 38 295 (mc sig) Grains;
#X text 38 334 (mc sig) State;
#X text 186 295 (mc sig) Array Position;
#X text 38 354 (mc sig) Lifetime;
#X text 186 322 (mc sig) Buffer Channel;
#X text 186 347 (mc sig) Stream ID;
#X obj 14 386 cnv 15 600 9 empty empty PARAMS: 0 20 0 14 #000000 #373737 0;
#X text 14 444 delay- delay time in ms;
#X text 14 468 rate- changes play speed in terms of rate;
#X text 14 492 transpose-rate in semitones;
#X text 14 516 glisson- rate over the duration of the grain;
#X text 14 540 glissonSt- glisson in semitones;
#X text 14 564 amp- changes the volume in amps;
#X text 14 588 space- empty space at the end of each grain (0-1);
#X text 14 660 density- the probability a grain will fire (0-1);
#X text 14 772 rateQuantizeSemi- quantizes transposition values to a number of semitones, f 74;
#X text 14 684 direction- probability or the direction of playback(-1 - 1);
#X obj 14 797 cnv 15 600 9 empty empty MESSAGES: 0 20 0 14 #000000 #373737 0;
#X text 14 420 (many have random and offset varients);
#X text 14 902 deviate {param} {f1} {f2} : randomly asigns a value to each grain f1 distance from f2., f 85;
#X text 14 926 spread {param} {f1} {f2} : evenly distributes values from f1 to f2, f 71;
#X text 14 950 g {n} {param} {f} : set a param for a single grain, f 71;
#X text 14 1017 streamSet {mode} {n} : asigns n streams in mode auto \, per \, or random, f 71;
#X text 14 1040 stream {param} {f} : sets a param for all grains in a stream;
#X text 14 1063 streamDeviate {param} {f1} {f2}: deviate for streams, f 71;
#X text 14 1086 streamSpread {param} {f1} {f2}: spread for streams, f 65;
#X obj 14 985 cnv 15 600 8 empty empty STREAMS: 0 20 0 14 #000000 #373737 0;
#X obj 14 1113 cnv 15 500 8 empty empty ARRAYS: 0 20 0 14 #000000 #373737 0;
#X text 159 295 4;
#X text 14 295 0;
#X text 14 1147 buf {name} : Array to granulate;
#X text 14 1169 env {name} {n} : array to be used as an envelope. n determines the number of envelopes contained in a 2D envelope., f 71;
#X text 14 1207 delayBuffer {name} : used if delayMode is set to 1 or 2;
#X text 14 1230 rateBuffer {name} : used if rateMode is set to 1 or 2;
#X text 14 1253 windowBuffer {name} : used if windowMode is set to 1 or 2;
#X text 14 1276 glissonBuffer {name} {n} : used if glisson mode is set to 1 n determines the number of envelopes contained in a 2D array., f 73;
#X text 14 708 {envelope | glisson}Position - sets the position to sample a 2D envelope | glisson, f 82;
#X text 14 612 window- position of each grain window (0-1), f 48;
#X text 14 732 {delay|window|rate|glisson}Mode - 0 is normal. 1 samples buffer based on grain. 2 samples buffer randomly, f 86;
#X text 14 878 autoOverlap {i}- sets windowOffset to 1/ngrains if i >= 1;
#X text 14 854 ngrains {i}- the number of active grains;
#X text 14 831 state {i}- toggles audio proccessing;
#X text 14 636 ---The following only have base version---;
#X text 14 -1 [grainflow~);
#X text 14 52 buffer-name- array to granulate;
#X text 14 70 max-grains- the maximum number of grains that can be used;
#X text 14 91 (optional)envelope-name- array that can be used for an envelope, f 73;
#X text 14 111 (optional)flags- parameters set on initialization in the format -param arg1.. argn, f 83;
#X restore 28 29 pd refrence;
#X msg 29 207 ngrains \$1;
#X obj 29 181 nbx 4 18 0 8 0 0 empty empty ngrains 0 -8 0 10 #e4e4e4 #4d4d4d #373737 0 256;
#X connect 0 0 25 2;
#X connect 1 0 12 0;
#X connect 2 0 25 0;
#X connect 3 0 0 0;
#X connect 4 0 25 3;
#X connect 5 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 2 0;
#X connect 9 0 25 1;
#X connect 10 0 25 0;
#X connect 12 0 25 0;
#X connect 13 0 15 0;
#X connect 14 0 13 0;
#X connect 16 0 17 0;
#X connect 17 0 8 0;
#X connect 18 0 19 0;
#X connect 19 0 7 0;
#X connect 25 0 14 0;
#X connect 25 2 14 1;
#X connect 29 0 25 0;
#X connect 30 0 29 0;
