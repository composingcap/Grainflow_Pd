#N canvas 231 321 1105 469 12;
#X obj 271 240 sig~ 0;
#X obj 28 103 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 103 161 phasor~ 8;
#X floatatom 272 218 5 0 0 1 Transposition\ Modulation - - 0;
#X obj 357 263 sig~ 0;
#X floatatom 357 238 5 0 1 1 Amplitude\ Modulation - - 0;
#X text 19 3 Grainflow~ - Granulate arrays;
#X floatatom 187 169 5 0 0 1 Traversal\ Phasor - - 0;
#X floatatom 103 134 7 0 0 1 Grain\ Clock - - 0;
#X obj 187 192 phasor~ 0.2;
#X obj 111 251 r _gf_params;
#N canvas 560 276 653 678 parameters 0;
#X obj 18 191 s _gf_params;
#X msg 93 150 delayRandom \$1;
#X floatatom 93 123 5 0 0 0 - - - 0;
#X text 10 60 For example \, here are the messages for the delay parameter;
#X floatatom 19 123 5 0 0 0 - - - 0;
#X msg 19 150 delay \$1;
#X floatatom 218 122 5 0 0 0 - - - 0;
#X msg 218 149 delayOffset \$1;
#X text 311 118 <= sets delay time in ms;
#X text 8 -1 Grainflow~ is controlled primaraly through parameter messages that control the properties of each grain. Each parameter has a base \, random \, and offset value. base: sets a fixed value random: sets a random value on each new grain offset: sets values that are scaled by the index of each grain, f 80;
#X text 17 217 Parameters can also be set in lists. These lists will rotate so that they repeat until each grain has a value, f 73;
#X text 18 373 ---A list of parameters--- delay- delay time in ms rate- changes play speed in terms of rate transpose- changes play speed in semitones glisson- changes the rate over the duration of the grain glissonSt- glisson in semitones space- sets the amount of empty space at the end of each grain (0-1) amp- changes the volume in amps window- sets the position of each grain on the phasor (0-1), f 74;
#X obj 25 348 s _gf_params;
#X floatatom 25 275 5 0 0 0 - - - 0;
#X floatatom 140 273 5 0 0 0 - - - 0;
#X floatatom 256 271 5 0 0 0 - - - 0;
#X floatatom 372 271 5 0 0 0 - - - 0;
#X text 18 531 These parameters only have base messages: density- the probability a grain will fire (0-1) direction- sets the probability a grain will play forwards or backwards rateQuantizeSemi- quantizes transposition values to a number of semitones, f 74;
#X obj 94 78 loadbang;
#X msg 93 99 200;
#X obj 25 300 pack 0 0 0 0, f 50;
#X obj 26 324 list prepend transpose;
#X obj 25 249 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 13 0 20 0;
#X connect 14 0 20 1;
#X connect 15 0 20 2;
#X connect 16 0 20 3;
#X connect 18 0 19 0;
#X connect 19 0 2 0;
#X connect 20 0 21 0;
#X connect 21 0 12 0;
#X connect 22 0 13 0;
#X restore 323 0 pd parameters;
#X msg 29 133 state \$1;
#X obj 102 352 *~ 0.25;
#X obj 102 322 grainflow.stereoPan~ 0.5 1;
#X obj 102 382 dac~ 1;
#X obj 102 84 loadbang;
#X msg 102 108 8;
#X obj 193 87 loadbang;
#X msg 193 111 0.2;
#X text 261 0 Topics:;
#N canvas 208 208 1043 255 _loadBuffers 0;
#X obj 34 92 soundfiler;
#X obj 171 103 array define _gf_buf;
#X msg 35 36 read -resize ./bells.wav _gf_buf;
#X obj 48 -9 loadbang;
#X obj 171 131 array define _gf_buf2;
#X msg 111 67 read -resize ./bassColLengo.wav _gf_buf2;
#X obj 325 103 array define _gf_customEnv;
#X msg 280 34 read -resize ./grainflow.Pluck.aif _gf_customEnv;
#X obj 370 133 array define _gf_2d_envelope;
#X msg 419 66 read -resize ./grainflow.2DEnvelope.aif _gf_2d_envelope;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 3 0 5 0;
#X connect 3 0 7 0;
#X connect 3 0 9 0;
#X connect 5 0 0 0;
#X connect 7 0 0 0;
#X connect 9 0 0 0;
#X restore 20 29 pd _loadBuffers;
#N canvas 26 26 830 300 buffersAndEnvelopes 0;
#X msg 121 33 buf _gf_buf2;
#X obj 18 60 s _gf_params;
#X msg 19 33 buf _gf_buf;
#X text 18 12 buf changes the refrence buffer;
#X msg 166 107 env default;
#X msg 13 107 env _gf_customEnv;
#X text 16 88 env changes the refrence envelope;
#X msg 222 32 buf _gf_buf _gf_buf2;
#X obj 14 141 s _gf_params;
#X text 221 54 ^this one uses two buffers;
#X msg 269 106 env _gf_customEnv default;
#X obj 15 247 s _gf_params;
#X msg 28 214 envelopePosition \$1;
#X obj 178 214 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 16 185 env _gf_2d_envelope 5;
#X text 192 176 An envelope followed by a number will be treated as a 2D envelope, f 33;
#X text 347 217 envelopePosition (0-1) controls where the 2D envelope is read, f 22;
#X connect 0 0 1 0;
#X connect 2 0 1 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 7 0 1 0;
#X connect 10 0 8 0;
#X connect 12 0 11 0;
#X connect 13 0 12 0;
#X connect 14 0 11 0;
#X restore 322 22 pd buffersAndEnvelopes;
#N canvas 1299 409 450 300 synthesis 1;
#X obj 94 123 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 91 154 state \$1;
#X obj 36 366 clone -d mc_fm 8, f 47;
#X obj 36 217 noise~;
#X obj 103 292 noise~;
#X obj 103 322 expr~ $v1 * 2 + 3;
#X obj 240 292 noise~;
#X obj 240 322 expr~ $v1 * 1 + 1.5;
#X obj 36 435 grainflow.stereoPan~;
#X obj 36 409 *~;
#X obj 36 494 dac~ 1;
#X obj 91 197 grainflow~ 0 8, f 37;
#X obj 168 154 phasor~ 0.1;
#X obj 36 466 *~ 0.125;
#X obj 36 247 expr~ $v1 * 400 + 600;
#X text 22 15 Granular Synthesis;
#X text 22 45 You can use the output of grainflow~ to drive granular synthesis. This example shows a simple FM soundscape driven by grainflow~;
#X text 364 187 <= When the buffer name is set to 0 \, grainflow does not attempt to read the buffer, f 32;
#X text 364 365 <= This clone distributes the input and output signals amongst voices, f 32;
#X connect 0 0 1 0;
#X connect 1 0 11 0;
#X connect 2 0 9 0;
#X connect 3 0 14 0;
#X connect 4 0 5 0;
#X connect 5 0 2 1;
#X connect 6 0 7 0;
#X connect 7 0 2 2;
#X connect 8 0 13 0;
#X connect 9 0 8 0;
#X connect 11 1 2 3 48.................X....3C....F....9....jC...P1....4....jM...Po....;
#X connect 11 1 8 1 32.................CC...bA...vv....W....nN....;
#X connect 11 5 9 1 32.................GC...nx++++w....p7+++CM....;
#X connect 12 0 11 0;
#X connect 13 0 10 0;
#X connect 14 0 2 0;
#X restore 322 71 pd synthesis;
#N canvas 781 320 856 453 multichannelInputs 0;
#X obj 61 295 grainflow.stereoPan~ 0.5 1;
#X obj 74 136 phasor~ 8;
#X obj 76 191 snake~ 2;
#X obj 216 202 snake~ 4;
#X obj 61 264 grainflow~ _gf_buf 12, f 37;
#X obj 130 156 phasor~ 15;
#X obj 209 109 phasor~ 0.1;
#X obj 227 131 phasor~ 0.05;
#X obj 253 155 phasor~ 0.2;
#X obj 272 177 phasor~ 0.25;
#X obj 372 164 snake~ 3;
#X obj 374 198 *~ 0.5;
#X obj 430 111 osc~ 5;
#X obj 61 338 *~ 0.25;
#X obj 61 368 dac~ 1;
#X obj 24 61 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 25 91 state \$1;
#X obj 371 112 osc~ 1;
#X obj 492 113 osc~ 20;
#X text 16 4 Grainflow~'s inlets can be controled with multichannel signals. There signals will rotate over the number of grains., f 76;
#X text 72 113 Grain clock;
#X text 207 85 Traversal;
#X text 369 84 Transposition;
#X connect 0 0 13 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 4 1;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 2 1;
#X connect 6 0 3 0;
#X connect 7 0 3 1;
#X connect 8 0 3 2;
#X connect 9 0 3 3;
#X connect 10 0 11 0;
#X connect 11 0 4 2;
#X connect 12 0 10 1;
#X connect 13 0 14 0;
#X connect 15 0 16 0;
#X connect 16 0 4 0;
#X connect 17 0 10 0;
#X connect 18 0 10 2;
#X restore 322 45 pd multichannelInputs;
#X obj 102 292 grainflow~ _gf_buf 8, f 37;
#N canvas 182 182 788 489 parameterArrays 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array rates 8 float 3;
#A 0 0.342857 1.34286 1.62858 1.97144 2.3143 2.68573 2.97144 3.42859;
#X coords 0 4 8 0 200 140 1 0 0;
#X restore 38 43 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array delays 8 float 3;
#A 0 499.993 1142.86 1750 2250 2750 3428.58 4071.44 4357.15;
#X coords 0 5000 8 0 200 140 1;
#X restore 266 43 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array windows 8 float 3;
#A 0 0.0499943 0.11428 0.28571 0.464283 0.592855 0.714284 0.828571 0.914285;
#X coords 0 1 8 0 200 140 1;
#X restore 481 43 graph;
#X obj 38 342 grainflow~ _gf_buf 8, f 37;
#X obj 38 306 phasor~ 8;
#X msg 11 274 state \$1;
#X obj 38 412 *~ 0.25;
#X obj 38 382 grainflow.stereoPan~ 0.5 1;
#X obj 38 442 dac~ 1;
#N canvas 733 172 450 300 setModes 0;
#X obj 25 236 outlet;
#X msg 25 108 rateMode 2 \, rateBuffer rates;
#X msg 228 108 delayMode 1 \, delayBuffer delays;
#X obj 25 23 loadbang;
#X msg 51 140 windowMode 1 \, windowBuffer windows;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 3 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X restore 340 267 pd setModes;
#X obj 11 236 tgl 25 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X connect 3 0 7 0;
#X connect 3 1 7 1;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 9 0 3 0;
#X connect 10 0 5 0;
#X restore 501 1 pd parameterArrays;
#N canvas 143 82 713 518 streams 0;
#X obj 27 126 tgl 19 0 empty empty State\  0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 100 342 phasor~ 8;
#X obj 180 342 phasor~ 0.2;
#X msg 24 162 state \$1;
#X obj 100 433 *~ 0.25;
#X obj 100 403 grainflow.stereoPan~ 0.5 1;
#X obj 100 463 dac~ 1;
#X obj 100 373 grainflow~ _gf_buf 8, f 37;
#X msg 100 162 streamSet auto 4;
#X msg 100 252 streamSet random 4;
#X msg 100 208 streamSet per 4;
#X text 391 161 You can assign parameter values to every grain in a stream, f 34;
#X msg 391 260 streamDeviate transpose 1 2;
#X msg 391 233 stream 1 transpose 9;
#X msg 391 299 streamSpread transpose 0 24;
#X msg 391 200 transpose 0;
#X text 488 198 <= normal param;
#X text 543 231 <= changes a single steam;
#X text 574 254 <= deviates all streams around a number, f 21;
#X text 583 297 <= Evenly distributes a param value to all streams, f 19;
#X text 215 161 <= Rotates through grains asigning streams, f 21;
#X text 215 200 <= Partitions grains into streams, f 17;
#X text 243 248 <= Randomly assigns streams, f 13;
#X text 27 19 Streams;
#X text 27 47 Streams are a way to easily control groups of grains;
#X connect 0 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 7 1;
#X connect 3 0 7 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 7 0 5 0;
#X connect 7 1 5 1;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X connect 12 0 7 0;
#X connect 13 0 7 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X restore 501 29 pd streams;
#X connect 0 0 25 2;
#X connect 1 0 12 0;
#X connect 2 0 25 0;
#X connect 3 0 0 0;
#X connect 4 0 25 3;
#X connect 5 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 2 0;
#X connect 9 0 25 1;
#X connect 10 0 25 0;
#X connect 12 0 25 0;
#X connect 13 0 15 0;
#X connect 14 0 13 0;
#X connect 16 0 17 0;
#X connect 17 0 8 0;
#X connect 18 0 19 0;
#X connect 19 0 7 0;
#X connect 25 0 14 0;
#X connect 25 1 14 1;
